knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(AnnotationHub)
library(ensembldb)
library(GenomicRanges)
library(epiwraps)
library(rtracklayer)
library(ggplot2)
})
peaksIRF3 <- rtracklayer::import("IRF3.narrowPeak")
peaksBcellPax5 <- rtracklayer::import("BcellPax5.broadPeak")
bed_file <- "Bcell.bed"
# Read in the BED file using read.table()
bed_df <- read.table(bed_file, header = FALSE, sep = "\t", colClasses = c("character", "integer", "integer", "character", "integer", "character", "numeric", "numeric", "numeric", "integer", "numeric", "numeric", "integer", "integer", "numeric", "integer", "integer", "integer", "numeric", "integer"))
# Replace invalid strand values with *
bed_df$V4[!bed_df$V4 %in% c("+", "-", "*")] <- "*"
# Replace . values with NA in the names column
bed_df$V6[bed_df$V6 == "."] <- NA
# Rename metadata columns
colnames(bed_df)[8] <- "signalValue"
colnames(bed_df)[9] <- "pValue"
colnames(bed_df)[10] <- "qValue"
colnames(bed_df)[11] <- "peak"
# Convert the data frame to a GRanges object
bed_granges <- GRanges(seqnames = bed_df$V1,
ranges = IRanges(start = bed_df$V2, end = bed_df$V3),
strand = bed_df$V4,
name = bed_df$V6,
score = bed_df$V7,
metadata = bed_df[, 8:ncol(bed_df)])
head(peaksIRF3)
head(peaksBcellPax5)
peaksIRF3$strand
head(bed_granges)
ah <- AnnotationHub()
query <- query(ah, c("GRCh37", "ensembl"))
query
query <- query(ah, c("GRCh37", "twobit"))
query
query <- query(ah, c("GRCh37"))
query
query <- query(ah, c("GRCh37", "2bit"))
query
showMethods("getSeq")
query <- query(ah, c("GRCh37", "fasta"))
query
query <- query(ah, c("GRCh37", "fafile"))
query
query <- query(ah, c("GRCh37"))
query
display(ah)
query <- query(ah, c("GRCh37", "ensmbl"))
query
query <- query(ah, c("GRCh37", "ensembl"))
query
genome <- ah[["AH10684"]]
peaksWidth <- width(peaksBcellPax5)
summary(peaksWidth)
quantile(peaksWidth, c(0.90))
plot(peaksWidth)
showMethods("getSeq")
Biostrings::writeXStringSet(rtracklayer::import(genome), "genome.fa")
library(Biostrings)
Biostrings::writeXStringSet(rtracklayer::import(genome), "genome.fa")
View(genome)
head(genome)
genome$gene_name
?getSeq
display(ah)
genome <- ah[["AH13964"]]
genome <- ah[["AH13964"]]
library(Biostrings)
#Biostrings::writeXStringSet(rtracklayer::import(genome), "genome.fa")
peak_centers <- resize(peaksBcellPax5, fix="center", width=450)
peak_seqs <- Biostrings::getSeq(genome, peak_centers)
peak_seqs
as.character(peak_seqs[1])
as.character(peak_seqs[1])
peak_seqs[1]
library(MotifDb)
# we search for "CTCF" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
#motif <- motifs[["Hsapiens-JASPAR_CORE-CTCF-MA0139.1"]]
# we visualize it:
#view_motifs(motif)
library(MotifDb)
# we search for "Pax5" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
motif <- motifs[["Hsapiens-SwissRegulon-PAX5.SwissRegulon" ]]
# we visualize it:
view_motifs(motif)
?view_motifs
library(MotifDb)
library(TFBSTools) # for handling some motif formats
library(universalmotif) # for converting motifs to various formats
library(PWMEnrich)
# we search for "Pax5" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
motif <- motifs[["Hsapiens-SwissRegulon-PAX5.SwissRegulon" ]]
# we visualize it:
view_motifs(motif)
library(MotifDb)
library(TFBSTools) # for handling some motif formats
library(universalmotif) # for converting motifs to various formats
library(PWMEnrich)
# we search for "Pax5" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
motif <- motifs[["Hsapiens-jaspar2022-PAX5-MA0014.3"]]
# we visualize it:
view_motifs(motif)
# if you don't already have the genome in fasta format saved somewhere, convert it to that format:
Biostrings::writeXStringSet(rtracklayer::import(genome), "genome.fa")
# we also need to convert the motif to a format that this package will accept
motif2 <- convert_motifs(motif, class="TFBSTools-PFMatrix")
# if we had a list of motifs instead, we'd convert them like this:
# motifs2 <- setNames(do.call(PFMatrixList, convert_motifs(motifs, class="TFBSTools-PFMatrix")), names(motifs))
moi2 <- motifmatchr::matchMotifs(motif2, subject=peak_centers, genome=Rsamtools::FaFile("genome.fa"), out="positions")[[1]]
View(motif)
View(motif)
# if you don't already have the genome in fasta format saved somewhere, convert it to that format:
Biostrings::writeXStringSet(rtracklayer::import(genome), "genome.fa")
# we also need to convert the motif to a format that this package will accept
motif2 <- convert_motifs(motif, class="TFBSTools-PFMatrix")
# if we had a list of motifs instead, we'd convert them like this:
# motifs2 <- setNames(do.call(PFMatrixList, convert_motifs(motifs, class="TFBSTools-PFMatrix")), names(motifs))
moi2 <- motifmatchr::matchMotifs(motif2, subject=peak_centers, genome=Rsamtools::FaFile("genome.fa"), out="positions")[[1]]
?rtracklayer::export
??export
# if you don't already have the genome in fasta format saved somewhere, convert it to that format:
Biostrings::writeXStringSet(genome, "genome.fa")
display(ah)
library(MotifDb)
library(TFBSTools) # for handling some motif formats
library(universalmotif) # for converting motifs to various formats
library(PWMEnrich)
# we search for "Pax5" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
#motif <- motifs[["Hsapiens-SwissRegulon-PAX5.SwissRegulon" ]]
# we visualize it:
#view_motifs(motif)
library(MotifDb)
library(TFBSTools) # for handling some motif formats
library(universalmotif) # for converting motifs to various formats
library(PWMEnrich)
# we search for "Pax5" in the motif database
motifs <- query(MotifDb, "Pax5")
# there are several matching motifs:
names(motifs)
# we select one:
motif <- motifs[["Hsapiens-jaspar2022-PAX5-MA0014.3"]]
# we visualize it:
view_motifs(motif)
# prepare multithreading:
registerCoresPWMEnrich(4)
# launch the analysis:
res <- motifEnrichment(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
# prepare multithreading:
#registerCoresPWMEnrich(4)
# launch the analysis:
res <- motifEnrichment(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
# prepare multithreading:
registerCoresPWMEnrich(1)
# launch the analysis:
res <- motifEnrichment(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
# for the sake of example, we'll just use the first 300 sequences:
res <- motifEnrichment(head(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
groupReport(res)
head(res)
# for the sake of example, we'll just use the first 300 sequences:
#res <- motifEnrichment(head(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
groupReport(res)
length(res)
# prepare multithreading:
registerCoresPWMEnrich(1)
# launch the analysis:
res <- motifEnrichment(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
# for the sake of example, we'll just use the first 300 sequences:
#res <- motifEnrichment(head(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
groupReport(res)
View(query)
View(res)
length(res)
res$group.nobg
res$sequence.nobg
?groupReport
head(motif2)
motif2
res
res$pwms
res$sequences
res$score
r = groupReport(res, top=0.01)
res$sequence.nobg
res[res$sequence.nobg < 0.05]
# for the sake of example, we'll just use the first 300 sequences:
#res <- motifEnrichment(head(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
groupReport(res)
motifs
# prepare multithreading:
registerCoresPWMEnrich(1)
# launch the analysis:
res <- motifEnrichment(peak_seqs, convert_motifs(motif, "PWMEnrich-PWM"))
# for the sake of example, we'll just use the first 300 sequences:
#res <- motifEnrichment(head(peak_seqs, convert_motifs(motifs, "PWMEnrich-PWM"))
groupReport(res)
?convert_motifs

knitr::opts_chunk$set(echo = TRUE)
download.file("https://ethz-ins.org/content/w10.assignment.zip", "w10.assignment.zip")
options(timeout=999999)
download.file("https://ethz-ins.org/content/w10.assignment.zip", "w10.assignment.zip")
unzip("w10.assignment.zip")
tracks <- list.files(pattern="bw$")
tracks
tracks <- list.files(pattern="bw$")
regions <- list.files(pattern="bed$")
tracks <- list.files(pattern="bw$")
regions <- list.files(pattern="bed$")
region1 <- rtracklayer::import.bed(regions[1])
region3 <- rtracklayer::import.bed(regions[2])
region3L1 <- rtracklayer::import.bed(regions[3])
length(region1)
length(region3)
length(region3L1)
ml <- signal2Matrix(tracks, c(region1, region2, region3L1), extend=2000)
suppressPackageStartupMessages({
library(GenomicRanges)
library(epiwraps)
library(ggplot2)
library(rGREAT)
})
BiocManager::install("rGREAT")
suppressPackageStartupMessages({
library(GenomicRanges)
library(epiwraps)
library(ggplot2)
library(rGREAT)
})
ml <- signal2Matrix(tracks, c(region1, region2, region3L1), extend=2000)
ml <- signal2Matrix(tracks, c(region1, region3, region3L1), extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
nf <- getNormFactors(tracks, useSeqLevels="chr1")
ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
cl2 <- clusterSignalMatrices(ml2, k=2:10)
cl2 <- clusterSignalMatrices(ml, k=2:10)
set.seed(123)  # to ensure that it gives the same results everytime
cl <- clusterSignalMatrices(ml, k=4)
table(cl)
head(cl)
length(cl)
length(regions)
regions$cluster <- cl
View(region1)
peaks <- list.files(pattern="bed$")
# we first import the peaks
peaks <- lapply(peaks, rtracklayer::import.bed)
# we'll focus on the high-quality peaks
peaks <- lapply(peaks, FUN=function(x) x[x$score>800])
# we get the union of non-redundant regions
regions <- reduce(unlist(GRangesList(peaks)))
ml <- signal2Matrix(peaks, regions, extend=2000)
tracks <- list.files(pattern="bw$")
regions <- list.files(pattern="bed$")
region1 <- rtracklayer::import.bed(regions[1])
region3 <- rtracklayer::import.bed(regions[2])
region3L1 <- rtracklayer::import.bed(regions[3])
tracks <- list.files(pattern="bw$")
peaks <- list.files(pattern="bed$")
peaks <- lapply(peaks, rtracklayer::import.bed)
# we'll focus on the high-quality peaks
peaks <- lapply(peaks, FUN=function(x) x[x$score>800])
# we get the union of non-redundant regions
regions <- reduce(unlist(GRangesList(peaks)))
ml <- signal2Matrix(tracks, c(region1, region3, region3L1), extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
nf <- getNormFactors(tracks, useSeqLevels="chr1")
ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
ml <- signal2Matrix(tracks, regions, extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
nf <- getNormFactors(tracks, useSeqLevels="chr1")
ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
tracks <- list.files(pattern="bw$")
peaks <- list.files(pattern="bed$")
peaks <- lapply(peaks, rtracklayer::import.bed)
# we'll focus on the high-quality peaks
peaks <- lapply(peaks, FUN=function(x) x[x$score>800])
# we get the union of non-redundant regions
regions <- reduce(unlist(GRangesList(peaks)))
ml <- signal2Matrix(tracks, regions, extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
nf <- getNormFactors(tracks, useSeqLevels="chr1")
ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
ml <- signal2Matrix(tracks, regions, extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
#nf <- getNormFactors(tracks, useSeqLevels="chr1")
#ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(GenomicRanges)
library(epiwraps)
library(ggplot2)
library(rGREAT)
})
tracks <- list.files(pattern="bw$")
peaks <- list.files(pattern="bed$")
peaks <- lapply(peaks, rtracklayer::import.bed)
# we'll focus on the high-quality peaks
peaks <- lapply(peaks, FUN=function(x) x[x$score>800])
# we get the union of non-redundant regions
regions <- reduce(unlist(GRangesList(peaks)))
ml <- signal2Matrix(tracks, regions, extend=2000)
set.seed(123)  # to ensure that it gives the same results everytime
#nf <- getNormFactors(tracks, useSeqLevels="chr1")
#ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
length(regions)
set.seed(123)
ml <- signal2Matrix(tracks, regions, extend=2000)
# to ensure that it gives the same results everytime
#nf <- getNormFactors(tracks, useSeqLevels="chr1")
#ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
ncol(peaks)
ncol(regions)
ncol(ml)
ncol(k=2:10)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(GenomicRanges)
library(epiwraps)
library(ggplot2)
library(rGREAT)
})
tracks <- list.files(pattern="bw$")
peaks <- list.files(pattern="bed$")
peaks <- lapply(peaks, rtracklayer::import.bed)
# we'll focus on the high-quality peaks
peaks <- lapply(peaks, FUN=function(x) x[x$score>800])
# we get the union of non-redundant regions
regions <- reduce(unlist(GRangesList(peaks)))
set.seed(123)
ml <- signal2Matrix(tracks, regions, extend=2000)
# to ensure that it gives the same results everytime
#nf <- getNormFactors(tracks, useSeqLevels="chr1")
#ml2 <- rescaleSignalMatrices(ml, scaleFactors=nf)
plotEnrichedHeatmaps(ml)
cl2 <- clusterSignalMatrices(ml, k=2:10)
View(peaks)
